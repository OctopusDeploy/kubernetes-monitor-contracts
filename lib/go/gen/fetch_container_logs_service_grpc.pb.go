// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: fetch_container_logs_service.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FetchContainerLogsService_FetchContainerLogs_FullMethodName = "/FetchContainerLogsService/FetchContainerLogs"
)

// FetchContainerLogsServiceClient is the client API for FetchContainerLogsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FetchContainerLogsServiceClient interface {
	FetchContainerLogs(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[FetchContainerLogsResponse, FetchContainerLogsRequest], error)
}

type fetchContainerLogsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFetchContainerLogsServiceClient(cc grpc.ClientConnInterface) FetchContainerLogsServiceClient {
	return &fetchContainerLogsServiceClient{cc}
}

func (c *fetchContainerLogsServiceClient) FetchContainerLogs(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[FetchContainerLogsResponse, FetchContainerLogsRequest], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FetchContainerLogsService_ServiceDesc.Streams[0], FetchContainerLogsService_FetchContainerLogs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FetchContainerLogsResponse, FetchContainerLogsRequest]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FetchContainerLogsService_FetchContainerLogsClient = grpc.BidiStreamingClient[FetchContainerLogsResponse, FetchContainerLogsRequest]

// FetchContainerLogsServiceServer is the server API for FetchContainerLogsService service.
// All implementations must embed UnimplementedFetchContainerLogsServiceServer
// for forward compatibility.
type FetchContainerLogsServiceServer interface {
	FetchContainerLogs(grpc.BidiStreamingServer[FetchContainerLogsResponse, FetchContainerLogsRequest]) error
	mustEmbedUnimplementedFetchContainerLogsServiceServer()
}

// UnimplementedFetchContainerLogsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFetchContainerLogsServiceServer struct{}

func (UnimplementedFetchContainerLogsServiceServer) FetchContainerLogs(grpc.BidiStreamingServer[FetchContainerLogsResponse, FetchContainerLogsRequest]) error {
	return status.Errorf(codes.Unimplemented, "method FetchContainerLogs not implemented")
}
func (UnimplementedFetchContainerLogsServiceServer) mustEmbedUnimplementedFetchContainerLogsServiceServer() {
}
func (UnimplementedFetchContainerLogsServiceServer) testEmbeddedByValue() {}

// UnsafeFetchContainerLogsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FetchContainerLogsServiceServer will
// result in compilation errors.
type UnsafeFetchContainerLogsServiceServer interface {
	mustEmbedUnimplementedFetchContainerLogsServiceServer()
}

func RegisterFetchContainerLogsServiceServer(s grpc.ServiceRegistrar, srv FetchContainerLogsServiceServer) {
	// If the following call pancis, it indicates UnimplementedFetchContainerLogsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FetchContainerLogsService_ServiceDesc, srv)
}

func _FetchContainerLogsService_FetchContainerLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FetchContainerLogsServiceServer).FetchContainerLogs(&grpc.GenericServerStream[FetchContainerLogsResponse, FetchContainerLogsRequest]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FetchContainerLogsService_FetchContainerLogsServer = grpc.BidiStreamingServer[FetchContainerLogsResponse, FetchContainerLogsRequest]

// FetchContainerLogsService_ServiceDesc is the grpc.ServiceDesc for FetchContainerLogsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FetchContainerLogsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FetchContainerLogsService",
	HandlerType: (*FetchContainerLogsServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FetchContainerLogs",
			Handler:       _FetchContainerLogsService_FetchContainerLogs_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "fetch_container_logs_service.proto",
}
