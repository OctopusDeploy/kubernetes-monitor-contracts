// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: fetch_events_service.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FetchEventsService_FetchEvents_FullMethodName = "/FetchEventsService/FetchEvents"
)

// FetchEventsServiceClient is the client API for FetchEventsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FetchEventsServiceClient interface {
	FetchEvents(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[FetchEventsResponse, FetchEventsRequest], error)
}

type fetchEventsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFetchEventsServiceClient(cc grpc.ClientConnInterface) FetchEventsServiceClient {
	return &fetchEventsServiceClient{cc}
}

func (c *fetchEventsServiceClient) FetchEvents(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[FetchEventsResponse, FetchEventsRequest], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FetchEventsService_ServiceDesc.Streams[0], FetchEventsService_FetchEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FetchEventsResponse, FetchEventsRequest]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FetchEventsService_FetchEventsClient = grpc.BidiStreamingClient[FetchEventsResponse, FetchEventsRequest]

// FetchEventsServiceServer is the server API for FetchEventsService service.
// All implementations must embed UnimplementedFetchEventsServiceServer
// for forward compatibility.
type FetchEventsServiceServer interface {
	FetchEvents(grpc.BidiStreamingServer[FetchEventsResponse, FetchEventsRequest]) error
	mustEmbedUnimplementedFetchEventsServiceServer()
}

// UnimplementedFetchEventsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFetchEventsServiceServer struct{}

func (UnimplementedFetchEventsServiceServer) FetchEvents(grpc.BidiStreamingServer[FetchEventsResponse, FetchEventsRequest]) error {
	return status.Errorf(codes.Unimplemented, "method FetchEvents not implemented")
}
func (UnimplementedFetchEventsServiceServer) mustEmbedUnimplementedFetchEventsServiceServer() {}
func (UnimplementedFetchEventsServiceServer) testEmbeddedByValue()                            {}

// UnsafeFetchEventsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FetchEventsServiceServer will
// result in compilation errors.
type UnsafeFetchEventsServiceServer interface {
	mustEmbedUnimplementedFetchEventsServiceServer()
}

func RegisterFetchEventsServiceServer(s grpc.ServiceRegistrar, srv FetchEventsServiceServer) {
	// If the following call pancis, it indicates UnimplementedFetchEventsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FetchEventsService_ServiceDesc, srv)
}

func _FetchEventsService_FetchEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FetchEventsServiceServer).FetchEvents(&grpc.GenericServerStream[FetchEventsResponse, FetchEventsRequest]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FetchEventsService_FetchEventsServer = grpc.BidiStreamingServer[FetchEventsResponse, FetchEventsRequest]

// FetchEventsService_ServiceDesc is the grpc.ServiceDesc for FetchEventsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FetchEventsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FetchEventsService",
	HandlerType: (*FetchEventsServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FetchEvents",
			Handler:       _FetchEventsService_FetchEvents_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "fetch_events_service.proto",
}
