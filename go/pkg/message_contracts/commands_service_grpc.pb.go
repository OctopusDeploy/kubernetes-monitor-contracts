// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: commands_service.proto

package message_contracts

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CommandsService_SubscribeToCommands_FullMethodName = "/CommandsService/SubscribeToCommands"
)

// CommandsServiceClient is the client API for CommandsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service for receiving commands from the server, follows a subscription model using a long lived RPC stream
type CommandsServiceClient interface {
	SubscribeToCommands(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ClientToServerStream, ServerToClientStream], error)
}

type commandsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommandsServiceClient(cc grpc.ClientConnInterface) CommandsServiceClient {
	return &commandsServiceClient{cc}
}

func (c *commandsServiceClient) SubscribeToCommands(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ClientToServerStream, ServerToClientStream], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CommandsService_ServiceDesc.Streams[0], CommandsService_SubscribeToCommands_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ClientToServerStream, ServerToClientStream]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CommandsService_SubscribeToCommandsClient = grpc.BidiStreamingClient[ClientToServerStream, ServerToClientStream]

// CommandsServiceServer is the server API for CommandsService service.
// All implementations must embed UnimplementedCommandsServiceServer
// for forward compatibility.
//
// Service for receiving commands from the server, follows a subscription model using a long lived RPC stream
type CommandsServiceServer interface {
	SubscribeToCommands(grpc.BidiStreamingServer[ClientToServerStream, ServerToClientStream]) error
	mustEmbedUnimplementedCommandsServiceServer()
}

// UnimplementedCommandsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCommandsServiceServer struct{}

func (UnimplementedCommandsServiceServer) SubscribeToCommands(grpc.BidiStreamingServer[ClientToServerStream, ServerToClientStream]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToCommands not implemented")
}
func (UnimplementedCommandsServiceServer) mustEmbedUnimplementedCommandsServiceServer() {}
func (UnimplementedCommandsServiceServer) testEmbeddedByValue()                         {}

// UnsafeCommandsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommandsServiceServer will
// result in compilation errors.
type UnsafeCommandsServiceServer interface {
	mustEmbedUnimplementedCommandsServiceServer()
}

func RegisterCommandsServiceServer(s grpc.ServiceRegistrar, srv CommandsServiceServer) {
	// If the following call pancis, it indicates UnimplementedCommandsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CommandsService_ServiceDesc, srv)
}

func _CommandsService_SubscribeToCommands_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CommandsServiceServer).SubscribeToCommands(&grpc.GenericServerStream[ClientToServerStream, ServerToClientStream]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CommandsService_SubscribeToCommandsServer = grpc.BidiStreamingServer[ClientToServerStream, ServerToClientStream]

// CommandsService_ServiceDesc is the grpc.ServiceDesc for CommandsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommandsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CommandsService",
	HandlerType: (*CommandsServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeToCommands",
			Handler:       _CommandsService_SubscribeToCommands_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "commands_service.proto",
}
