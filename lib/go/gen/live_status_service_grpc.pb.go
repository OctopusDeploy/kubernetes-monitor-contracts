// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: live_status_service.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LiveStatusService_UpdateMonitoredResources_FullMethodName      = "/LiveStatusService/UpdateMonitoredResources"
	LiveStatusService_ReplaceMonitoredResources_FullMethodName     = "/LiveStatusService/ReplaceMonitoredResources"
	LiveStatusService_DeleteChildMonitoredResources_FullMethodName = "/LiveStatusService/DeleteChildMonitoredResources"
)

// LiveStatusServiceClient is the client API for LiveStatusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service to update the status of Kubernetes resources
type LiveStatusServiceClient interface {
	UpdateMonitoredResources(ctx context.Context, in *UpdateMonitoredResourcesRequest, opts ...grpc.CallOption) (*UpdateMonitoredResourcesResponse, error)
	ReplaceMonitoredResources(ctx context.Context, in *ReplaceMonitoredResourcesRequest, opts ...grpc.CallOption) (*ReplaceMonitoredResourcesResponse, error)
	DeleteChildMonitoredResources(ctx context.Context, in *DeleteChildMonitoredResourcesRequest, opts ...grpc.CallOption) (*DeleteChildMonitoredResourcesResponse, error)
}

type liveStatusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLiveStatusServiceClient(cc grpc.ClientConnInterface) LiveStatusServiceClient {
	return &liveStatusServiceClient{cc}
}

func (c *liveStatusServiceClient) UpdateMonitoredResources(ctx context.Context, in *UpdateMonitoredResourcesRequest, opts ...grpc.CallOption) (*UpdateMonitoredResourcesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMonitoredResourcesResponse)
	err := c.cc.Invoke(ctx, LiveStatusService_UpdateMonitoredResources_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveStatusServiceClient) ReplaceMonitoredResources(ctx context.Context, in *ReplaceMonitoredResourcesRequest, opts ...grpc.CallOption) (*ReplaceMonitoredResourcesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReplaceMonitoredResourcesResponse)
	err := c.cc.Invoke(ctx, LiveStatusService_ReplaceMonitoredResources_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *liveStatusServiceClient) DeleteChildMonitoredResources(ctx context.Context, in *DeleteChildMonitoredResourcesRequest, opts ...grpc.CallOption) (*DeleteChildMonitoredResourcesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteChildMonitoredResourcesResponse)
	err := c.cc.Invoke(ctx, LiveStatusService_DeleteChildMonitoredResources_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LiveStatusServiceServer is the server API for LiveStatusService service.
// All implementations must embed UnimplementedLiveStatusServiceServer
// for forward compatibility.
//
// Service to update the status of Kubernetes resources
type LiveStatusServiceServer interface {
	UpdateMonitoredResources(context.Context, *UpdateMonitoredResourcesRequest) (*UpdateMonitoredResourcesResponse, error)
	ReplaceMonitoredResources(context.Context, *ReplaceMonitoredResourcesRequest) (*ReplaceMonitoredResourcesResponse, error)
	DeleteChildMonitoredResources(context.Context, *DeleteChildMonitoredResourcesRequest) (*DeleteChildMonitoredResourcesResponse, error)
	mustEmbedUnimplementedLiveStatusServiceServer()
}

// UnimplementedLiveStatusServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLiveStatusServiceServer struct{}

func (UnimplementedLiveStatusServiceServer) UpdateMonitoredResources(context.Context, *UpdateMonitoredResourcesRequest) (*UpdateMonitoredResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMonitoredResources not implemented")
}
func (UnimplementedLiveStatusServiceServer) ReplaceMonitoredResources(context.Context, *ReplaceMonitoredResourcesRequest) (*ReplaceMonitoredResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplaceMonitoredResources not implemented")
}
func (UnimplementedLiveStatusServiceServer) DeleteChildMonitoredResources(context.Context, *DeleteChildMonitoredResourcesRequest) (*DeleteChildMonitoredResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChildMonitoredResources not implemented")
}
func (UnimplementedLiveStatusServiceServer) mustEmbedUnimplementedLiveStatusServiceServer() {}
func (UnimplementedLiveStatusServiceServer) testEmbeddedByValue()                           {}

// UnsafeLiveStatusServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LiveStatusServiceServer will
// result in compilation errors.
type UnsafeLiveStatusServiceServer interface {
	mustEmbedUnimplementedLiveStatusServiceServer()
}

func RegisterLiveStatusServiceServer(s grpc.ServiceRegistrar, srv LiveStatusServiceServer) {
	// If the following call pancis, it indicates UnimplementedLiveStatusServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LiveStatusService_ServiceDesc, srv)
}

func _LiveStatusService_UpdateMonitoredResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMonitoredResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveStatusServiceServer).UpdateMonitoredResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveStatusService_UpdateMonitoredResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveStatusServiceServer).UpdateMonitoredResources(ctx, req.(*UpdateMonitoredResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveStatusService_ReplaceMonitoredResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplaceMonitoredResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveStatusServiceServer).ReplaceMonitoredResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveStatusService_ReplaceMonitoredResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveStatusServiceServer).ReplaceMonitoredResources(ctx, req.(*ReplaceMonitoredResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LiveStatusService_DeleteChildMonitoredResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChildMonitoredResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveStatusServiceServer).DeleteChildMonitoredResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LiveStatusService_DeleteChildMonitoredResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveStatusServiceServer).DeleteChildMonitoredResources(ctx, req.(*DeleteChildMonitoredResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LiveStatusService_ServiceDesc is the grpc.ServiceDesc for LiveStatusService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LiveStatusService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "LiveStatusService",
	HandlerType: (*LiveStatusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateMonitoredResources",
			Handler:    _LiveStatusService_UpdateMonitoredResources_Handler,
		},
		{
			MethodName: "ReplaceMonitoredResources",
			Handler:    _LiveStatusService_ReplaceMonitoredResources_Handler,
		},
		{
			MethodName: "DeleteChildMonitoredResources",
			Handler:    _LiveStatusService_DeleteChildMonitoredResources_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "live_status_service.proto",
}
